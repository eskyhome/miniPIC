#!/bin/bash

#Default settings: change those according to your machine
#For example have two different wrappers with icpc and g++  as backend
default_arch="sm_35"
default_compiler="/home/projects/openmpi/1.8.1/gnu/4.7.2/cuda/6.0.37/bin"
default_compiler="mpicxx"

#Internal variables
cpp_files=""
xcompiler_args=""
cuda_arg=""
xlinker_args=""
object_files=""
object_files_xlinker=""
first_host_option=1
arch_set=0
ccbin_set=0
nvcc_error_code=0
dry_run=0

#echo "Arguments: $# $@"

while [ $# -gt 0 ]
do
  case $1 in
  --show)
    dry_run=1
    ;;
  #handle source files to be compiled as cuda files
  *.cpp|*.cxx|*.C|*.c++|*.cc|*.cu)
    cpp_files="$cpp_files $1"
    ;;
  #Handle known nvcc args
  -O*|-D*|-gencode*|-c|-I*|-L*|-l*|-g|--help|--version|--dryrun|--verbose|--std=c++11|--keep-dir|-E|-M|-G)
    cuda_args="$cuda_args $1"
    ;;
  #Handle known nvcc args that have an argument
  -o|-rdc)
    cuda_args="$cuda_args $1 $2"
    shift
    ;;
  #strip of pedantic because it produces endless warnings about #LINE added by the preprocessor
  -pedantic)
    ;;
  #strip of "-x cu" because we add that
  -x)
    if [[ $2 != "cu" ]]; then
      xcompiler_args="$xcompiler_args,-x,$2"
    fi
    shift
    ;;
  #Handle -ccbin (if its not set we can set it to a default value)
  -ccbin)
    cuda_args="$cuda_args $1 $2"
    ccbin_set=1
    shift
    ;;
  #Handle -arch argument (if its not set use a default
  -arch*)
    cuda_args="$cuda_args $1"
    arch_set=1
    ;;
  #Handle object files: -x cu applies to all input files, so give them to linker, except if only linking
  *.o|*.a|*.so)
    object_files="$object_files $1"
    object_files_xlinker="$object_files_xlinker -Xlinker $1"
    ;;
  #Handle args that should be sent to the linker
  -Wl*)
    xlinker_args="$xlinker_args -Xlinker ${1:4:${#1}}"
    ;;
  #All other args are sent to the host compiler
  *)
    if [ $first_host_option -eq 0 ]; then 
      xcompiler_args="$xcompiler_args,$1"
    else
      xcompiler_args="-Xcompiler $1"
      first_host_option=0
    fi
    ;;
  esac

  shift
done

#Add default host compiler if necessary
if [ $ccbin_set -ne 1 ]; then
  cuda_args="$cuda_args -ccbin $default_compiler"
fi

#Add architecture command
if [ $arch_set -ne 1 ]; then
  cuda_args="$cuda_args -arch=$default_arch"
fi

#Compose compilation command
command="nvcc $cuda_args $xlinker_args $xcompiler_args"

if [ "$cpp_files" ]; then
  command="$command $object_files_xlinker -x cu $cpp_files"
else
  command="$command $object_files"
fi

#Print command for dryrun
if [ $dry_run -eq 1 ]; then
  echo $command
  exit 0
fi

#Run compilation command
$command
nvcc_error_code=$?

#Report error code
exit $nvcc_error_code
